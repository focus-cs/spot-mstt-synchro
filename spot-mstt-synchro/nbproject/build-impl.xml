<project xmlns:ivy="antlib:org.apache.ivy.ant"
         name="spot-mstt-synchro" default="main" basedir=".">
    <description>
        Create a Java Project (JAR) with Ant build script
    </description>

    <property name="projectName" value="spot-mstt-synchro" />
    <property name="src.dir" location="src" />
    <property name="build.dir" location="bin" />
    <property name="dist.dir" location="dist" />
    <property name="dist.lib.dir" location="dist/lib" />
    <property name="lib.dir" value="lib" />
    <property name="conf.dir" value="conf" />
    <property name="distribution.dir" location="distribution"/>
    <property name="delivery.dir" location="./delivery" />
    <property name="delivery_dev.dir" location="./delivery/dev" />
    <property name="delivery_prod.dir" location="./delivery/prod" />
    <property name="delivery_qualif.dir" location="./delivery/qualif" />
    <property name="delivery_local_dev.dir" location="./delivery/local_dev" />
    <property name="main-class" value="pco.schneider.main.SpotMsttSynchro" />

    <property name="ivy.install.version" value="2.4.0"/>
    <property name="ivy.jar.dir" value="${basedir}/ivy"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
    <property name="build.dir" value="build"/>
    <property name="src.dir" value="src"/>
  
    <target name="download-ivy" unless="skip.download">
        <mkdir dir="${ivy.jar.dir}"/>
        <!--
         download Ivy from web site so that it can be used even without any special installation
        -->
        <echo message="installing ivy..."/>
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <!-- install ivy -->
    <target name="install-ivy" depends="download-ivy" description="--> install ivy">
        <!--
         try to load Ivy here from local Ivy dir, in case the user has not already dropped
                     it into Ant's lib dir (note that the latter copy will always take precedence).
                     We will not fail as long as local lib dir exists (it may be empty) and
                     Ivy is in at least one of Ant's lib dir or the local lib dir.
        -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>
    <!-- ivy end -->

    <target name="init" depends="install-ivy">
        <ivy:retrieve/>
        <mkdir dir="${build.dir}" />
    </target>

    <!-- external libraries classpath, we don't need sources and javadoc -->
    <path id="classpath">
        <fileset dir="${basedir}/">
            <include name="${lib.dir}/*.jar" />
            <exclude name="${lib.dir}/*sources.jar"/>
            <exclude name="${lib.dir}/*javadoc.jar"/>
        </fileset>
    </path>

    <!-- To work with external libraries, need classpath to compile -->
    <target name="compile" depends="init" description="compile the source ">
        <javac includeantruntime="false" srcdir="${src.dir}" destdir="${build.dir}" classpathref="classpath" />
    </target>

    <!-- constructs the external libraries classpath name -->
    <pathconvert property="classpath.name" pathsep=" ">
        <path refid="classpath" />
        <mapper>
            <chainedmapper>
                <flattenmapper />
                <globmapper from="*.jar" to="lib/*.jar" />
            </chainedmapper>
        </mapper>
    </pathconvert>

    <target name="copy-dependencies">
        <copy todir="${dist.lib.dir}">
            <fileset dir="${lib.dir}" includes="**/*.jar" excludes="**/*sources.jar, **/*javadoc.jar" />
        </copy>
    </target>

    <!-- jar it, and declares the ext libraries in manifest.mf file -->
    <target name="jar" depends="compile, copy-dependencies" description="package, output to JAR">

        <echo message="classpath.name : ${classpath.name} " />

        <mkdir dir="${dist.dir}" />
        <mkdir dir="${dist.lib.dir}" />

        <jar jarfile="${dist.dir}/${projectName}.jar" basedir="${build.dir}">
            <manifest>
                <attribute name="Main-Class" value="${main-class}" />
                <attribute name="Class-Path" value="${classpath.name}" />
            </manifest>
        </jar>
    </target>

    <target name="clean" description="clean up">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
    </target>

    <target name="copy-resources" description="copy Java resources like xml and properties files">
<!--        <copy todir="${dist.dir}/config">
            <fileset dir="${basedir}/config">
                <include name="**/*.properties" />
            </fileset>
        </copy>-->
<!--        <copy todir="${dist.dir}">
            <fileset dir="${distribution.dir}">
                <include name="**/*"/>
            </fileset>
        </copy>-->
    </target>
  
    <target name="mkzip_delivery_dev" depends="compile" description="create BATCH delivery file">
        <!-- Copy conf files + bin + to delivery -->

        <!-- copy of .bat -->
        <copy todir="${dist.dir}/dev/bin" overwrite="yes">
            <fileset dir="${conf.dir}/dev" includes="*.bat" />
        </copy>

        <!-- copy of .properties -->
        <copy todir="${dist.dir}/dev/conf" overwrite="yes">
            <fileset dir="${conf.dir}/dev" includes="*.properties" />
        </copy>

        <!-- copy of MSTT .jar files -->
<!--        <copy todir="${dist.dir}/dev/mstt-lib" overwrite="yes">
            <fileset dir="${mstt.psnext.lib.dir}" includes="*.jar" />
        </copy>

         copy of SPOT .jar files 
        <copy todir="${dist.dir}/dev/spot-lib" overwrite="yes">
            <fileset dir="${spot.psnext.lib.dir}" includes="*.jar" />
        </copy>-->

        <!-- zip dist folder -->
<!--        <zip destfile="${delivery_dev.dir}/${zip.file}">
            <zipfileset dir="${dist.dir}/dev/bin" prefix="bin" />
            <zipfileset dir="${dist.dir}/dev/conf" prefix="conf" />
            <zipfileset dir="${dist.dir}/dev/log" prefix="log" />
            <zipfileset dir="${dist.dir}/dev/lib" includes="*.jar" prefix="lib" />
            <zipfileset dir="${dist.dir}/dev/mstt-lib" includes="*.jar" prefix="mstt-lib" />
            <zipfileset dir="${dist.dir}/dev/spot-lib" includes="*.jar" prefix="spot-lib" />
        </zip>-->
    </target>
  
    <!-- Default, run this -->
    <target name="main" depends="clean, compile, jar, copy-resources" />

</project>
